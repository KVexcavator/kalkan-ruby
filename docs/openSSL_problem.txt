Чтобы решить проблему на Ubuntu 23.04, можно выполнить следующие шаги:

### 1. Обновите OpenSSL

Убедитесь, что у вас установлена последняя версия OpenSSL. На некоторых системах алгоритмы с малой длиной ключа могут быть отключены по умолчанию из-за соображений безопасности.

### 2. Настройка OpenSSL для поддержки слабых алгоритмов

Если обновление OpenSSL не помогло, можно попытаться настроить OpenSSL для использования устаревших или слабых алгоритмов, если это разрешено в вашей системе.

Создайте конфигурационный файл для OpenSSL:

1. Найдите текущий конфигурационный файл OpenSSL (обычно это `/etc/ssl/openssl.cnf` или `/usr/local/ssl/openssl.cnf`).
2. Сделайте резервную копию этого файла.
3. Добавьте следующую настройку в конец файла:

```sh
openssl_conf = openssl_def

[openssl_def]
engines = engine_section

[engine_section]
default = default_sect

[default_sect]
default_algorithms = ALL:RC2-40-CBC
```

### 3. Установите необходимые библиотеки

Убедитесь, что у вас установлены все необходимые библиотеки, такие как `libssl-dev` и `libjansson-dev`.

```sh
sudo apt-get update
sudo apt-get install libssl-dev libjansson-dev
```

### 4. Проверка OpenSSL

Проверьте, может ли OpenSSL теперь работать с RC2-40-CBC:

```sh
openssl version -a
```
OpenSSL 3.0.10 1 Aug 2023 (Library: OpenSSL 3.0.10 1 Aug 2023)
built on: Wed Feb 21 10:45:39 2024 UTC
platform: debian-amd64
options:  bn(64,64)
compiler: gcc -fPIC -pthread -m64 -Wa,--noexecstack -Wall -fzero-call-used-regs=used-gpr -DOPENSSL_TLS_SECURITY_LEVEL=2 -Wa,--noexecstack -g -O2 -ffile-prefix-map=/build/openssl-YSd17K/openssl-3.0.10=. -flto=auto -ffat-lto-objects -fstack-protector-strong -fstack-clash-protection -Wformat -Werror=format-security -fcf-protection -fdebug-prefix-map=/build/openssl-YSd17K/openssl-3.0.10=/usr/src/openssl-3.0.10-1ubuntu2.3 -DOPENSSL_USE_NODELETE -DL_ENDIAN -DOPENSSL_PIC -DOPENSSL_BUILDING_OPENSSL -DNDEBUG -Wdate-time -D_FORTIFY_SOURCE=2
OPENSSLDIR: "/usr/lib/ssl"
ENGINESDIR: "/usr/lib/x86_64-linux-gnu/engines-3"
MODULESDIR: "/usr/lib/x86_64-linux-gnu/ossl-modules"
Seeding source: os-specific
CPUINFO: OPENSSL_ia32cap=0x7ffaf3ffffebffff:0x98c027bc239c27eb

### 5. Использование OpenSSL для преобразования P12 в PEM

Если проблема не исчезает, можно попробовать использовать другой инструмент для извлечения сертификатов и ключей, например OpenSSL.

```sh
openssl pkcs12 -in GOSTKNCA.p12 -out GOSTKNCA.pem -nodes
```

Введите пароль Aa1234

Enter Import Password:
Error outputting keys and certificates
40376DDE4F720000:error:1E08010C:DECODER routines:OSSL_DECODER_from_bio:unsupported:../crypto/encode_decode/decoder_lib.c:101:No supported data to decode.  Input type: DER, Input structure: PrivateKeyInfo
40376DDE4F720000:error:0300009C:digital envelope routines:pkey_set_type:unsupported algorithm:../crypto/evp/p_lib.c:1555:
40376DDE4F720000:error:03000076:digital envelope routines:evp_pkcs82pkey_legacy:unsupported private key algorithm:../crypto/evp/evp_pkey.c:41:TYPE=1.2.398.3.10.1.1.1.1
-------------------------------------------------------------
OpenSSL поддерживал алгоритм шифрования RC2 до версии 1.1.0 включительно. В версиях 1.1.1 и последующих RC2 был удален из стандартных списков шифров из-за его уязвимости и небезопасности.
-------------------------------------------------------------
2. Настройка OpenSSL для поддержки слабых алгоритмов(не пробовал)
Если обновление OpenSSL не помогло, можно попытаться настроить OpenSSL для использования устаревших или слабых алгоритмов, если это разрешено в вашей системе.

Создайте конфигурационный файл для OpenSSL:

Найдите текущий конфигурационный файл OpenSSL (обычно это /etc/ssl/openssl.cnf или /usr/local/ssl/openssl.cnf).
Сделайте резервную копию этого файла.
Добавьте следующую настройку в конец файла:

```
openssl_conf = openssl_def

[openssl_def]
engines = engine_section

[engine_section]
default = default_sect

[default_sect]
default_algorithms = ALL:RC2-40-CBC
```
========================================================
https://pro-ldap.ru/tr/openssl-cookbook/ch-openssl.html
https://cryptocom.ru/docs/CryptoPack_4.0/openssl.pdf
https://help.heroku.com/88GYDTB2/how-do-i-configure-openssl-to-allow-the-use-of-legacy-cryptographic-algorithms
https://github.com/openssl/openssl/discussions/23089
=======================================================
openssl help
Standard commands
asn1parse         ca                ciphers           cmp
cms               crl               crl2pkcs7         dgst
dhparam           dsa               dsaparam          ec
ecparam           enc               engine            errstr
fipsinstall       gendsa            genpkey           genrsa
help              info              kdf               list
mac               nseq              ocsp              passwd
pkcs12            pkcs7             pkcs8             pkey
pkeyparam         pkeyutl           prime             rand
rehash            req               rsa               rsautl
s_client          s_server          s_time            sess_id
smime             speed             spkac             srp
storeutl          ts                verify            version
x509

Message Digest commands (see the `dgst' command for more details)
blake2b512        blake2s256        md4               md5
rmd160            sha1              sha224            sha256
sha3-224          sha3-256          sha3-384          sha3-512
sha384            sha512            sha512-224        sha512-256
shake128          shake256          sm3

Cipher commands (see the `enc' command for more details)
aes-128-cbc       aes-128-ecb       aes-192-cbc       aes-192-ecb
aes-256-cbc       aes-256-ecb       aria-128-cbc      aria-128-cfb
aria-128-cfb1     aria-128-cfb8     aria-128-ctr      aria-128-ecb
aria-128-ofb      aria-192-cbc      aria-192-cfb      aria-192-cfb1
aria-192-cfb8     aria-192-ctr      aria-192-ecb      aria-192-ofb
aria-256-cbc      aria-256-cfb      aria-256-cfb1     aria-256-cfb8
aria-256-ctr      aria-256-ecb      aria-256-ofb      base64
bf                bf-cbc            bf-cfb            bf-ecb
bf-ofb            camellia-128-cbc  camellia-128-ecb  camellia-192-cbc
camellia-192-ecb  camellia-256-cbc  camellia-256-ecb  cast
cast-cbc          cast5-cbc         cast5-cfb         cast5-ecb
cast5-ofb         des               des-cbc           des-cfb
des-ecb           des-ede           des-ede-cbc       des-ede-cfb
des-ede-ofb       des-ede3          des-ede3-cbc      des-ede3-cfb
des-ede3-ofb      des-ofb           des3              desx
rc2               rc2-40-cbc        rc2-64-cbc        rc2-cbc
rc2-cfb           rc2-ecb           rc2-ofb           rc4
rc4-40            seed              seed-cbc          seed-cfb
seed-ecb          seed-ofb          sm4-cbc           sm4-cfb
sm4-ctr           sm4-ecb           sm4-ofb
-----------------------------------------------------
openssl pkcs12 -help

General options:
 -help               Display this summary
 -in infile          Input file
 -out outfile        Output file
 -passin val         Input file pass phrase source
 -passout val        Output file pass phrase source
 -password val       Set PKCS#12 import/export password source
 -twopass            Separate MAC, encryption passwords
 -nokeys             Don't output private keys
 -nocerts            Don't output certificates
 -noout              Don't output anything, just verify PKCS#12 input
 -legacy             Use legacy encryption: 3DES_CBC for keys, RC2_CBC for certs
 -engine val         Use engine, possibly a hardware device

Provider options:
 -provider-path val  Provider load path (must be before 'provider' argument if required)
 -provider val       Provider to load (can be specified multiple times)
 -propquery val      Property query used when fetching algorithms

Random state options:
 -rand val           Load the given file(s) into the random number generator
 -writerand outfile  Write random data to the specified file

PKCS#12 import (parsing PKCS#12) options:
 -info               Print info about PKCS#12 structure
 -nomacver           Don't verify integrity MAC
 -clcerts            Only output client certificates
 -cacerts            Only output CA certificates
 -*                  Any supported cipher for output encryption
 -noenc              Don't encrypt private keys
 -nodes              Don't encrypt private keys; deprecated

PKCS#12 output (export) options:
 -export             Create PKCS12 file
 -inkey val          Private key, else read from -in input file
 -certfile infile    Extra certificates for PKCS12 output
 -passcerts val      Certificate file pass phrase source
 -chain              Build and add certificate chain for EE cert,
                     which is the 1st cert from -in matching the private key (if given)
 -untrusted infile   Untrusted certificates for chain building
 -CAfile infile      PEM-format file of CA's
 -CApath dir         PEM-format directory of CA's
 -CAstore uri        URI to store of CA's
 -no-CAfile          Do not load the default certificates file
 -no-CApath          Do not load certificates from the default certificates directory
 -no-CAstore         Do not load certificates from the default certificates store
 -name val           Use name as friendly name
 -caname val         Use name as CA friendly name (can be repeated)
 -CSP val            Microsoft CSP name
 -LMK                Add local machine keyset attribute to private key
 -keyex              Set key type to MS key exchange
 -keysig             Set key type to MS key signature
 -keypbe val         Private key PBE algorithm (default AES-256 CBC)
 -certpbe val        Certificate PBE algorithm (default PBES2 with PBKDF2 and AES-256 CBC)
 -descert            Encrypt output with 3DES (default PBES2 with PBKDF2 and AES-256 CBC)
 -macalg val         Digest algorithm to use in MAC (default SHA256)
 -iter +int          Specify the iteration count for encryption and MAC
 -noiter             Don't use encryption iteration
 -nomaciter          Don't use MAC iteration)
 -maciter            Unused, kept for backwards compatibility
 -nomac              Don't generate MAC
 --------------------------------------------
 openssl ciphers -v 'RC2'
Error in cipher list
40E7947F537D0000:error:0A0000B9:SSL routines:SSL_CTX_set_cipher_list:no cipher match:../ssl/ssl_lib.c:2760:
Ошибка error:0A0000B9 указывает на то, что OpenSSL не может найти соответствующий шифр в списке шифров.
---------------------------------------------
